# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI

on:
  push:
    branches: [ "main", "develop" ]
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.19.1]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{github.event.after}}
      - name: Get Commit Message
        run: |
          GITHUB_REPO_URL="https://github.com/${{ github.repository }}/"
          GITHUB_COMMIT_URL="${GITHUB_REPO_URL}commit/"
          BOT_TOKEN="5584194183:AAHuNofjFsY5Y2IhLPvCWP1GO3PH0e8wcDQ"
          WEBHOOK_URL="https://api.telegram.org/bot{$BOT_TOKEN}/sendMessage"
          CHAT_ID="699002063"
          REPO_NAME="${{ github.event.repository.name }}"
          GITHUB_BRANCH_COMMITS_URL="${GITHUB_REPO_URL}commits/${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}"
          GIT_BRANCH=${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}
          NUMBER=$(git rev-list ${{github.event.before}}...${{github.event.after}} --count)
          git log -n ${NUMBER} --pretty=format:"%h" > logs.txt
          SLACK_TEXTS=""
          SHA_IDS=""
          for (( i=1; i<="${NUMBER}"; i++ ))
          do
            commit=$(sed "${i}q;d" logs.txt)
            commit=${commit:0:7}
            element="$(git show ${commit} --pretty=format:"%h" --no-patch)"
            echo "ELEMENT: ${element}"
            SLACK_TEXT="$(git show ${element} --pretty=format:"%h%x09%an%x09%s" --no-patch)"
            echo "SLACK_TEXT: ${SLACK_TEXT}"
            REPLACE_TEXT="\n[${element}](${GITHUB_COMMIT_URL}${element})"
            SLACK_TEXT=$(echo $SLACK_TEXT | sed -e "s@$element@$REPLACE_TEXT@g")
            SLACK_TEXTS="${SLACK_TEXTS}${SLACK_TEXT}"
          done
          echo "${SLACK_TEXTS}"
          SLACK_HEADER="[${REPO_NAME}](${GITHUB_REPO_URL}) [${GIT_BRANCH}]({GITHUB_BRANCH_COMMITS_URL})"
          REPLACEMENT_WITH_MESSAGE="${SLACK_HEADER}${SLACK_TEXTS}"
          MESSAGES=$(echo '{"chat_id":"'"${CHAT_ID}"'","text":"'"${REPLACEMENT_WITH_MESSAGE}"'", "parse_mode" : "markdown"}')
          echo "${MESSAGES}"
          curl -X POST -H 'Content-type: application/json' --data "${MESSAGES}" ${WEBHOOK_URL}
        continue-on-error: true